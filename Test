import java.util.Scanner;

class BinarySearchTree {
    static class Node {
        int data;
        Node left, right;

        public Node(int item) {
            data = item;
            left = right = null;
        }
    }

    Node root;

    BinarySearchTree() {
        root = null;
    }

    void insert(int key) {
        root = insertRec(root, key);
    }

    Node insertRec(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.data)
            root.left = insertRec(root.left, key);
        else if (key > root.data)
            root.right = insertRec(root.right, key);

        return root;
    }

    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.data + " ");
            inorderRec(root.right);
        }
    }

    void preorder() {
        preorderRec(root);
    }

    void preorderRec(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorderRec(root.left);
            preorderRec(root.right);
        }
    }

    void postorder() {
        postorderRec(root);
    }

    void postorderRec(Node root) {
        if (root != null) {
            postorderRec(root.left);
            postorderRec(root.right);
            System.out.print(root.data + " ");
        }
    }

    void displayArray() {
        System.out.println("1-D Array Representation:");
        displayArrayRec(root);
        System.out.println();
    }

    void displayArrayRec(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");
            displayArrayRec(root.left);
            displayArrayRec(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        // Inserting values into the binary search tree
        int[] values = {5, 9, 3, 2, 4, 8};
        for (int value : values) {
            tree.insert(value);
        }

        // Printing 1-D array representation
        System.out.println("1-D Array Representation:");
        tree.displayArray();

        // Printing preorder traversal
        System.out.println("Preorder Traversal:");
        tree.preorder();

        // Printing postorder traversal
        System.out.println("\nPostorder Traversal:");
        tree.postorder();

        // Printing inorder traversal
        System.out.println("\nInorder Traversal:");
        tree.inorder();
    }
}
